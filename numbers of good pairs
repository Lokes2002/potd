/* Q3. Given an array of integers nums, return the number of good pairs. */

//1. brute force approach

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int i,count=0;
        int n=nums.length;

// comparing the element by traverse and update the count 

       for(i=0; i<n; i++) {
           for(int j=i+1; j<n; j++) {
               if(nums[j]==nums[i])
               {
                   count++;
               }
           }
       }
        return count;
    }
}


/*
Time complexity = O(n^2)
space complexity = O(1)
*/


// 2.  optimal approach
class Solution {
    public int numIdenticalPairs(int[] nums) {
        int n=nums.length;

        // create the frequency array (constraint array)
        int count_array[] = new int[101];
        
        //count the frequency of element and place to frequency array

        for(int i=0; i<n; i++)
        {
            count_array[nums[i]]++;
        }
        
        // calute the count and add them
        int count,sum=0;

        for(int i=0; i<101; i++) {
            count = count_array[i]*(count_array[i]-1)/2;
            sum+=count;
        }
        //return the sum

        return sum;
     }
        }


/*
Time complexity = O(n)
space complexity = O(1)
*/
